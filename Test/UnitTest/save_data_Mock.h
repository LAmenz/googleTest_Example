#if !defined SAVE_DATAMOCKS_H
#define SAVE_DATAMOCKS_H

/**********************************************************************************************************************
  WARNING
-----------------------------------------------------------------------------------------------------------------------
  This file is automatically generated. Any changes will be lost if the Mocks for this TestObject are re-generated!
**********************************************************************************************************************/


/**********************************************************************************************************************
 *  INCLUDES
 *********************************************************************************************************************/
#include "gmock/gmock.h"
#include "save_data_include.h"

/*---  --------------------------------------------------------------------------------------------------------------*/
using ::testing::Mock;
using ::testing::_;


/**********************************************************************************************************************
 *  Stubbed Functions
 *********************************************************************************************************************/
namespace Mocks {

class Check_Buffer_Para
{
  public: 
    virtual ~Check_Buffer_Para() {}
    virtual boolean Check_range(uint8 lent)= 0;
    virtual boolean isPointer_NotNull(uint8* buff)= 0;
}; /*Mock for Check_Buffer_Para */
/* Namespace Mocks */
}


/**********************************************************************************************************************
 *  Google Test Mocks
 *********************************************************************************************************************/
class MockCheck_Buffer_Para : public Mocks::Check_Buffer_Para
{
  public:
    /* Declaration of constructor and destructor */
    MockCheck_Buffer_Para();
    virtual ~MockCheck_Buffer_Para();

    MOCK_METHOD(boolean, Check_range, (uint8 lent), (override));
    MOCK_METHOD(boolean, isPointer_NotNull, (uint8* buff), (override));
};
/* Test Object Env */
class Save_DataEnv : public ::testing::Test
{
  public:
    Save_DataEnv()
    {
      UseCustomMocks();
    }

/* Initialize mocks to use "NiceMock" */
    void UseNiceMocks(boolean resetCslMock = true)
    {
      _Check_Buffer_Para.reset(new ::testing::NiceMock<MockCheck_Buffer_Para>());
    }

/* Initialize mocks to use "NaggyMock" */
    void UseNaggyMocks(boolean resetCslMock = true)
    {
      _Check_Buffer_Para.reset(new ::testing::NaggyMock<MockCheck_Buffer_Para>());
    }

/* Initialize mocks to use "StrictMock" */
    void UseStrictMocks(boolean resetCslMock = true)
    {
      _Check_Buffer_Para.reset(new ::testing::StrictMock<MockCheck_Buffer_Para>());
    }

/* Initialize mocks to use "CustomMock" */
    virtual void UseCustomMocks(boolean resetCslMock = true)
    {
    /* MockKind of the mocked objects are set in the properties field of the mocked entity using Is<MockKind>Mock. */
    /* The default MockKind is Nice. */
      _Check_Buffer_Para.reset(new ::testing::NiceMock<MockCheck_Buffer_Para>());
    }





/* InitializeConfigMocks */

/* Verify and Clear Expectations */
/* WARNING:  Google updated their documentation and removed the usecase of using VerifyAndClearExpectations 
            for checkpointing. Unfortunately, we followed the "old" documentation and recommended to use those
            checkpoints to separate the individual test steps. Setting any new expectation on a mock after
            the mock was used by the code (even after VerifyAndClear was called) results in undefined behavior. 

            Please use the new FinalizeTestStep function instead. It will reset all mocks (except the CSL
            mocks) so that it is "safe" to set new expectations afterwards. Unfortunately this will also 
            clear the ON_CALL behavior of the mocks. */
    bool VerifyAndClearExpectationsAllMocks()
    {
      return true && Mock::VerifyAndClearExpectations(_Check_Buffer_Para.get());
    }

/* Verify and Clear */
/* WARNING:  Google updated their documentation and removed the usecase of using VerifyAndClear 
            for checkpointing. Unfortunately, we followed the "old" documentation and recommended to use those
            checkpoints to separate the individual test steps. Setting any new expectation on a mock after
            the mock was used by the code (even after VerifyAndClear was called) results in undefined behavior.

            Please use the new FinalizeTestStep function instead. It will do essentially the same
            but it it won't return true/false (if there is an unmatched expectation the TCASE will
            fail regardless. */
    bool VerifyAndClearAllMocks()
    {
      return true && Mock::VerifyAndClear(_Check_Buffer_Para.get());
    }

/* SetUp of the default behavior of the mocks in the environment */

    virtual void SetUpMocksDefaultBehavior()
    {
      /* Intentionally left empty, overwrite this function in your fixture if needed.
       It is called in the SetUp function of the testcase and each time after a test step is finalized. */
    }

    virtual void SetUp()
    {
      SetUpMocksDefaultBehavior();
    }

/* Finalize Test Step */

/* Call this function at the end of a test step. It will reset all mocks so that you can define the behavior
   and set new expectations for the next test step. If there were any unfulfilled expectations so far, the test
   case will fail. 

   Optionally you can provide a string as MessageOnExpectationError that is logged to the test report if
   there was an error within the expectations.

   By default the CSL Mock is not reset so that all your changes to the configuration are persisted across
   the different test steps. If you chose to use EXPECT_CALL for the CSL Mock and you want to set new
   expectations in the next test step, you will need to reset the CSL Mock as well to avoid undefined
   behavior in the google mock implementation. 

   Overwrite this function in your fixture if needed.
   */
    virtual void FinalizeTestStep(std::string MessageOnExpectationError = "", boolean resetCslMock = false)
    {
      if(MessageOnExpectationError != "")
      {
        ASSERT_TRUE(VerifyAndClearExpectationsAllMocks()) << MessageOnExpectationError;
      }
      UseCustomMocks(resetCslMock);
      SetUpMocksDefaultBehavior();
    }


    ~Save_DataEnv()
    {
      _Check_Buffer_Para.reset();
    }

/* Mock Members */
    static std::unique_ptr<MockCheck_Buffer_Para> _Check_Buffer_Para;

};

#endif